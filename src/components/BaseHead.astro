---
import { siteConfig } from '@/site-config'
import '../styles/global.css'
import { ClientRouter } from 'astro:transitions'
import { Schema } from 'astro-seo-schema'

export interface Props {
	title: string
	description?: string
	ogImage?: string | undefined
	articleDate?: string | undefined
	articleUpdatedDate?: string | undefined
	category?: string[] | undefined
	tags?: string[] | undefined
}

const { 
	title, 
	description = siteConfig.description, 
	ogImage, 
	articleDate,
	articleUpdatedDate,
	category = [],
	tags = []
} = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const canonicalURLString = canonicalURL.toString()
const socialImageURL = new URL(ogImage ? ogImage : '/open-graph.png', Astro.url).href

const titleSeparator = 'â€¢'

const siteTitle = `${title} ${titleSeparator} ${siteConfig.title}`

import { join } from 'path'
import { AstroFont } from 'astro-font'
---

<!-- Global Metadata -->
<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
<meta name='generator' content={Astro.generator} />

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Preconnect to Google domains for ads -->
<link rel="preconnect" href="https://pagead2.googlesyndication.com" />
<link rel="preconnect" href="https://googleads.g.doubleclick.net" />
<link rel="preconnect" href="https://www.googletagservices.com" />
<link rel="preconnect" href="https://adservice.google.com" />
<link rel="preconnect" href="https://tpc.googlesyndication.com" />

<!-- Primary Meta Tags -->
<title>{siteTitle}</title>

<!-- ViewTransitions  -->
<ClientRouter />

<!-- Google AdSense - Load asynchronously with high priority but non-blocking -->

<!-- SEO -->
<meta name='title' content={siteTitle} />
<meta name='description' content={description} />
<meta name='author' content={siteConfig.author} />
{tags.length > 0 && <meta name='keywords' content={tags.join(', ')} />}

<!-- Open Graph / Facebook -->
<meta property='og:type' content={articleDate ? 'article' : 'website'} />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={socialImageURL} />
{
	articleDate && (
		<>
			<meta property='article:author' content={siteConfig.author} />
			<meta property='article:published_time' content={articleDate} />
			{articleUpdatedDate && (
				<meta property='article:modified_time' content={articleUpdatedDate} />
			)}
			{category.map(cat => <meta property='article:section' content={cat} />)}
			{tags.map(tag => <meta property='article:tag' content={tag} />)}
		</>
	)
}

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={socialImageURL} />

<!-- RSS auto-discovery -->
<link rel='alternate' type='application/rss+xml' title={siteConfig.title} href='/rss.xml' />


<!-- Schema.org JSON-LD -->
{
	articleDate ? (
		<>
			<Schema
				item={{
					"@context": "https://schema.org",
					"@type": "BlogPosting",
					"headline": title,
					"description": description,
					"image": socialImageURL,
					"datePublished": articleDate,
					"dateModified": articleUpdatedDate || articleDate,
					"author": {
						"@type": "Person",
						"name": siteConfig.author
					},
					"publisher": {
						"@type": "Organization",
						"name": siteConfig.title,
						"url": siteConfig.site
					},
					"mainEntityOfPage": {
						"@type": "WebPage",
						"@id": canonicalURLString
					},
					"keywords": tags.join(', '),
					"inLanguage": siteConfig.lang,
					"articleSection": category.join(', '),
					"url": canonicalURLString
				}}
			/>
			<Schema
			item={{
				"@context": "https://schema.org",
				"@type": "BreadcrumbList",
				"itemListElement": [
					{
						"@type": "ListItem",
						"position": 1,
						"name": "Domov",
						"item": siteConfig.site
					},
					{
						"@type": "ListItem",
						"position": 2,
						"name": category[0],
						"item": `${siteConfig.site}category/${category[0].toLowerCase()}/1`
					},
					{
						"@type": "ListItem",
						"position": 3,
						"name": title
					}
				]
			}}
			/>
			<Schema
			item={{
				"@context": "https://schema.org",
				"@type": "WebSite",
				"name": siteConfig.title,
				"description": siteConfig.description,
				"url": siteConfig.site,
				"author": {
					"@type": "Person",
					"name": siteConfig.author
				},
				"inLanguage": siteConfig.lang,
				"mainEntityOfPage": {
					"@type": "WebPage",
					"@id": siteConfig.site
				}
			}}
			/>
			<Schema
			item={{
				"@context": "https://schema.org",
				"@type": "Organization",
				"url": siteConfig.site,
				"logo": {
					"@type": "ImageObject",
					"url": `${siteConfig.site}favicon.svg`,
					"height": "112",
					"width": "112"
				},
				"name": siteConfig.title,
				"email": "info@BlogWebsite.si",
				"description": siteConfig.description,
				"sameAs": [
					"https://www.facebook.com/"
				]
			}}
			/>
		</>
	) : (
		<>
			<Schema
				item={{
					"@context": "https://schema.org",
					"@type": "WebSite",
					"name": siteConfig.title,
					"description": siteConfig.description,
					"url": siteConfig.site,
					"author": {
						"@type": "Person",
						"name": siteConfig.author
					},
					"inLanguage": siteConfig.lang,
					"mainEntityOfPage": {
						"@type": "WebPage",
						"@id": siteConfig.site
					}
				}}
			/>
			<Schema
			item={{
				"@context": "https://schema.org",
				"@type": "Organization",
				"url": siteConfig.site,
				"logo": {
					"@type": "ImageObject",
					"url": `${siteConfig.site}favicon.svg`,
					"height": "112",
					"width": "112"
				},
				"name": siteConfig.title,
				"email": "info@BlogWebsite.si",
				"description": siteConfig.description,
				"sameAs": [
					"https://www.facebook.com/"
				]
			}}
			/>
		</>
	)
}

<AstroFont
	config={[
		{
			preload: false,
			display: 'swap',
			name: 'Manrope',
			fallback: 'sans-serif',
			src: [
				{
					weight: '200',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-ExtraLight.woff2')
				},
				{
					weight: '300',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-Light.woff2')
				},
				{
					weight: '400',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-Regular.woff2')
				},
				{
					weight: '500',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-Medium.woff2')
				},
				{
					weight: '600',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-SemiBold.woff2')
				},
				{
					weight: '700',
					preload: true,
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-Bold.woff2')
				},
				{
					weight: '800',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-ExtraBold.woff2')
				}
			]
		}
	]}
/>
